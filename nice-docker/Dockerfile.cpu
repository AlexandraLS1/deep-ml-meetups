#FROM ubuntu:16.04
# FROM jfinmetrix/rhadley_ubuntu
FROM ubuntu:trusty
#FROM debian:stretch

MAINTAINER Shlomo <shlomo@deep-ml.com>

#ENV LLVM_CONFIG /usr/local/opt/llvm/bin/llvm-config
#ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config

#Install base dependencies
RUN apt-get update && apt-get install -y git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurlpp-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget

RUN apt-get update && apt-get install liblapack-dev fortran-compiler llvm-3.8-dev libedit-dev

RUN apt-get update


RUN sudo apt-get update -qq \
 && apt-get install --no-install-recommends -y \
    # install python 3
    build-essential \
    clang-3.8 \
    lldb-3.8 \
    llvm-3.8 \
    llvm-3.8-dev \
    llvm-3.8-runtime \
    python-clang-3.8 \
    lldb-3.8-dev \
    libclang-common-3.8-dev \
    libclang-3.8-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*


#Install dependencies
RUN apt-get update && apt-get install --no-install-recommends  -y \
        # install essentials
        build-essential \
        software-properties-common \
        g++ \
        git \
        wget \
        tar \
        git \
        imagemagick \
        curl \
		bc \
		htop\
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		unzip \
		vim \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libjpeg-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libjasper-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		doxygen \
		less \
        htop \
        procps \
        vim-tiny \
        libboost-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/* && \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
	update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3


####################################################PYTHON2########################################################
# install debian packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update -qq \
 && apt-get install --no-install-recommends -y \
    # install python 2
    python \
    python-dev \
    python-pip \
    python-setuptools \
    python-virtualenv \
    python-wheel \
	python-tk \
    pkg-config \
    # requirements for numpy
    libopenblas-base \
    python-numpy \
    python-scipy \
    # requirements for keras
    python-h5py \
    python-yaml \
    python-pydot \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN pip install setuptools pyOpenSSL ndg-httpsclient pyasn1
RUN pip install pip --upgrade

#RUN pip install urllib3[secure]


# system level python 2 libs
RUN apt-get update && apt-get install -y \
		python-numpy \
		python-scipy \
		python-nose \
		python-h5py \
		python-skimage \
		python-matplotlib \
		python-pandas \
		python-sklearn \
		python-sympy \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*


ARG TENSORFLOW_VERSION=0.11.0
ARG TENSORFLOW_DEVICE=cpu
ARG TENSORFLOW_APPEND=
RUN pip --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl

ARG KERAS_VERSION=1.2.2
ENV KERAS_BACKEND=tensorflow
RUN pip --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}


RUN pip install --upgrade pip
ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config
RUN pip install --egg git+git://github.com/numba/llvmlite@v0.11.0

# Distributed dataframes
RUN pip --no-cache-dir numba
RUN pip --no-cache-dir install  dask
RUN pip --no-cache-dir fastparquet

#please point LLVM_CONFIG to the path for llvm-config

RUN pip --no-cache-dir install  llvmpy
RUN pip --no-cache-dir install  cython pytest


# Install BAYESIAN FRAMEWORKS
RUN pip --no-cache-dir install  pymc3 pystan edward watermark xgboost bokeh seaborn mmh3


# dump package lists
RUN dpkg-query -l > /dpkg-query-l.txt \
 && pip2 freeze > /pip2-freeze.txt

####################################################PYTHON2########################################################





# dump package lists
RUN dpkg-query -l > /dpkg-query-l.txt \
 && pip2 freeze > /pip2-freeze.txt \
 && pip3 freeze > /pip3-freeze.txt

# for jupyter
EXPOSE 8888
# for tensorboard
EXPOSE 6006


# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/
RUN chmod +x /root/run_jupyter.sh

# Expose Ports for TensorBoard (6006), Ipython (8888) drill
#EXPOSE 6006 8888 8047

#WORKDIR "/root"

#CMD ["/bin/bash", "-c", "./root/run_jupyter.sh"]


WORKDIR /srv/
CMD /bin/bash -c 'jupyter notebook --no-browser --ip=* --NotebookApp.password="$PASSWD" "$@"'